package cpu.pipeline.decoder

import chisel3._
import chisel3.util._
import cpu.defines._
import cpu.defines.Const._

class DecodedInst extends Bundle {
  val inst_valid = Bool()
  val reg1_ren   = Bool()
  val reg2_ren   = Bool()
  val fusel      = UInt(FU_SEL_WID.W)
  val op         = UInt(OP_WID.W)
  val reg_wen    = Bool()
  val reg_waddr  = UInt(REG_ADDR_WID.W)
  val imm32      = UInt(DATA_WID.W)
}

class Decoder extends Module {
  val io = IO(new Bundle {
    // inputs
    val in = Input(new Bundle {
      val inst = UInt(INST_WID.W)
    })
    // outputs
    val out = Output(new DecodedInst())
  })
  val inst = io.in.inst

  val signals: List[UInt] = ListLookup(
    inst,
    List(INST_INVALID, READ_DISABLE, READ_DISABLE, FU_NOP, EXE_NOP, WRITE_DISABLE, WRA_X, IMM_N),
    Array( /* inst_valid | reg1_ren | reg2_ren | fusel | op | reg_wen | reg_waddr | imm_type */
      // NOP
      NOP -> List(INST_VALID, READ_DISABLE, READ_DISABLE, FU_NOP, EXE_NOP, WRITE_DISABLE, WRA_X, IMM_N),
      // 位操作
      OR  -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_ALU, EXE_OR, WRITE_ENABLE, WRA_T1, IMM_N),
      AND -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_ALU, EXE_AND, WRITE_ENABLE, WRA_T1, IMM_N),
      XOR -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_ALU, EXE_XOR, WRITE_ENABLE, WRA_T1, IMM_N),
      NOR -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_ALU, EXE_NOR, WRITE_ENABLE, WRA_T1, IMM_N),
      // 移位
      SLLV -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_ALU, EXE_SLL, WRITE_ENABLE, WRA_T1, IMM_N),
      SRLV -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_ALU, EXE_SRL, WRITE_ENABLE, WRA_T1, IMM_N),
      SRAV -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_ALU, EXE_SRA, WRITE_ENABLE, WRA_T1, IMM_N),
      SLL  -> List(INST_VALID, READ_DISABLE, READ_ENABLE, FU_ALU, EXE_SLL, WRITE_ENABLE, WRA_T1, IMM_SHT),
      SRL  -> List(INST_VALID, READ_DISABLE, READ_ENABLE, FU_ALU, EXE_SRL, WRITE_ENABLE, WRA_T1, IMM_SHT),
      SRA  -> List(INST_VALID, READ_DISABLE, READ_ENABLE, FU_ALU, EXE_SRA, WRITE_ENABLE, WRA_T1, IMM_SHT),
      // 立即数
      ORI  -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_ALU, EXE_OR, WRITE_ENABLE, WRA_T2, IMM_LZE),
      ANDI -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_ALU, EXE_AND, WRITE_ENABLE, WRA_T2, IMM_LZE),
      XORI -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_ALU, EXE_XOR, WRITE_ENABLE, WRA_T2, IMM_LZE),
      LUI  -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_ALU, EXE_OR, WRITE_ENABLE, WRA_T2, IMM_HZE),

      // Move
      // MOVN      -> List( INST_VALID  , READ_ENABLE   , READ_ENABLE   , FU_MF   , EXE_MOVN , WRITE_ENABLE , WRA_T1  , IMM_N  ),
      // MOVZ      -> List( INST_VALID  , READ_ENABLE   , READ_ENABLE   , FU_MF   , EXE_MOVZ , WRITE_ENABLE , WRA_T1  , IMM_N  ),

      // HI，LO的Move指令
      MFHI -> List(INST_VALID, READ_DISABLE, READ_DISABLE, FU_MF, EXE_MFHI, WRITE_ENABLE, WRA_T1, IMM_N),
      MFLO -> List(INST_VALID, READ_DISABLE, READ_DISABLE, FU_MF, EXE_MFLO, WRITE_ENABLE, WRA_T1, IMM_N),
      MTHI -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_MT, EXE_MTHI, WRITE_DISABLE, WRA_X, IMM_N),
      MTLO -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_MT, EXE_MTLO, WRITE_DISABLE, WRA_X, IMM_N),

      // C0的Move指令
      MFC0 -> List(INST_VALID, READ_DISABLE, READ_DISABLE, FU_MF, EXE_MFC0, WRITE_ENABLE, WRA_T2, IMM_N),
      MTC0 -> List(INST_VALID, READ_DISABLE, READ_ENABLE, FU_MT, EXE_MTC0, WRITE_DISABLE, WRA_X, IMM_N),

      // 比较指令
      SLT  -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_ALU, EXE_SLT, WRITE_ENABLE, WRA_T1, IMM_N),
      SLTU -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_ALU, EXE_SLTU, WRITE_ENABLE, WRA_T1, IMM_N),
      // 立即数
      SLTI  -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_ALU, EXE_SLT, WRITE_ENABLE, WRA_T2, IMM_LSE),
      SLTIU -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_ALU, EXE_SLTU, WRITE_ENABLE, WRA_T2, IMM_LSE),

      // Trap
      // TEQ       -> List( INST_VALID  , READ_ENABLE   , READ_ENABLE   , FU_TRAP   , EXE_TEQ  , WRITE_DISABLE  , WRA_X     , IMM_N  ),
      // TEQI      -> List( INST_VALID  , READ_ENABLE   , READ_DISABLE  , FU_TRAP   , EXE_TEQ  , WRITE_DISABLE  , WRA_X     , IMM_LSE),
      // TGE       -> List( INST_VALID  , READ_ENABLE   , READ_ENABLE   , FU_TRAP   , EXE_TGE  , WRITE_DISABLE  , WRA_X     , IMM_N  ),
      // TGEI      -> List( INST_VALID  , READ_ENABLE   , READ_DISABLE  , FU_TRAP   , EXE_TGE  , WRITE_DISABLE  , WRA_X     , IMM_LSE),
      // TGEIU     -> List( INST_VALID  , READ_ENABLE   , READ_DISABLE  , FU_TRAP   , EXE_TGEU , WRITE_DISABLE  , WRA_X     , IMM_LSE),
      // TGEU      -> List( INST_VALID  , READ_ENABLE   , READ_ENABLE   , FU_TRAP   , EXE_TGEU , WRITE_DISABLE  , WRA_X     , IMM_N  ),
      // TLT       -> List( INST_VALID  , READ_ENABLE   , READ_ENABLE   , FU_TRAP   , EXE_TLT  , WRITE_DISABLE  , WRA_X     , IMM_N  ),
      // TLTI      -> List( INST_VALID  , READ_ENABLE   , READ_DISABLE  , FU_TRAP   , EXE_TLT  , WRITE_DISABLE  , WRA_X     , IMM_LSE),
      // TLTU      -> List( INST_VALID  , READ_ENABLE   , READ_ENABLE   , FU_TRAP   , EXE_TLTU , WRITE_DISABLE  , WRA_X     , IMM_N  ),
      // TLTIU     -> List( INST_VALID  , READ_ENABLE   , READ_DISABLE  , FU_TRAP   , EXE_TLTU , WRITE_DISABLE  , WRA_X     , IMM_LSE),
      // TNE       -> List( INST_VALID  , READ_ENABLE   , READ_ENABLE   , FU_TRAP   , EXE_TNE  , WRITE_DISABLE  , WRA_X     , IMM_N  ),
      // TNEI      -> List( INST_VALID  , READ_ENABLE   , READ_DISABLE  , FU_TRAP   , EXE_TNE  , WRITE_DISABLE  , WRA_X     , IMM_LSE),

      // 算术指令
      ADD  -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_ALU, EXE_ADD, WRITE_ENABLE, WRA_T1, IMM_N),
      ADDU -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_ALU, EXE_ADDU, WRITE_ENABLE, WRA_T1, IMM_N),
      SUB  -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_ALU, EXE_SUB, WRITE_ENABLE, WRA_T1, IMM_N),
      SUBU -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_ALU, EXE_SUBU, WRITE_ENABLE, WRA_T1, IMM_N),
      // MUL       -> List( INST_VALID  , READ_ENABLE   , READ_ENABLE   , EXE_RES_MUL   , EXE_MUL  , WRITE_ENABLE   , WRA_T1    , IMM_N  ),
      MULT  -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_MT, EXE_MULT, WRITE_DISABLE, WRA_X, IMM_N),
      MULTU -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_MT, EXE_MULTU, WRITE_DISABLE, WRA_X, IMM_N),
      // MADD      -> List( INST_VALID  , READ_ENABLE   , READ_ENABLE   , EXE_RES_MUL   , EXE_MADD , WRITE_DISABLE  , WRA_X     , IMM_N  ),
      // MADDU     -> List( INST_VALID  , READ_ENABLE   , READ_ENABLE   , EXE_RES_MUL   , EXE_MADDU, WRITE_DISABLE  , WRA_X     , IMM_N  ),
      // MSUB      -> List( INST_VALID  , READ_ENABLE   , READ_ENABLE   , EXE_RES_MUL   , EXE_MSUB , WRITE_DISABLE  , WRA_X     , IMM_N  ),
      // MSUBU     -> List( INST_VALID  , READ_ENABLE   , READ_ENABLE   , EXE_RES_MUL   , EXE_MSUBU, WRITE_DISABLE  , WRA_X     , IMM_N  ),
      DIV  -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_MT, EXE_DIV, WRITE_DISABLE, WRA_X, IMM_N),
      DIVU -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_MT, EXE_DIVU, WRITE_DISABLE, WRA_X, IMM_N),
      // CLO       -> List( INST_VALID  , READ_ENABLE   , READ_DISABLE  , FU_ALU   , EXE_CLO  , WRITE_ENABLE   , WRA_T1    , IMM_N  ),
      // CLZ       -> List( INST_VALID  , READ_ENABLE   , READ_DISABLE  , FU_ALU   , EXE_CLZ  , WRITE_ENABLE   , WRA_T1    , IMM_N  ),
      // 立即数
      ADDI  -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_ALU, EXE_ADD, WRITE_ENABLE, WRA_T2, IMM_LSE),
      ADDIU -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_ALU, EXE_ADDU, WRITE_ENABLE, WRA_T2, IMM_LSE),
      // 跳转指令
      J      -> List(INST_VALID, READ_DISABLE, READ_DISABLE, FU_BR, EXE_J, WRITE_DISABLE, WRA_X, IMM_N),
      JAL    -> List(INST_VALID, READ_DISABLE, READ_DISABLE, FU_BR, EXE_JAL, WRITE_ENABLE, WRA_T3, IMM_N),
      JR     -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_BR, EXE_JR, WRITE_DISABLE, WRA_X, IMM_N),
      JALR   -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_BR, EXE_JALR, WRITE_ENABLE, WRA_T1, IMM_N),
      BEQ    -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_BR, EXE_BEQ, WRITE_DISABLE, WRA_X, IMM_N),
      BNE    -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_BR, EXE_BNE, WRITE_DISABLE, WRA_X, IMM_N),
      BGTZ   -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_BR, EXE_BGTZ, WRITE_DISABLE, WRA_X, IMM_N),
      BLEZ   -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_BR, EXE_BLEZ, WRITE_DISABLE, WRA_X, IMM_N),
      BGEZ   -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_BR, EXE_BGEZ, WRITE_DISABLE, WRA_X, IMM_N),
      BGEZAL -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_BR, EXE_BGEZAL, WRITE_ENABLE, WRA_T3, IMM_N),
      BLTZ   -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_BR, EXE_BLTZ, WRITE_DISABLE, WRA_X, IMM_N),
      BLTZAL -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_BR, EXE_BLTZAL, WRITE_ENABLE, WRA_T3, IMM_N),
      // BEQL      -> List( INST_VALID , READ_ENABLE   , READ_ENABLE   , FU_BR , EXE_EQ   , WRITE_DISABLE  , WRA_X  , IMM_N  ),
      // BNEL      -> List( INST_VALID , READ_ENABLE   , READ_ENABLE   , FU_BR , EXE_NE   , WRITE_DISABLE  , WRA_X  , IMM_N  ),
      // BGTZL     -> List( INST_VALID , READ_ENABLE   , READ_DISABLE    , FU_BR , EXE_GTZ  , WRITE_DISABLE  , WRA_X  , IMM_N  ),
      // BLEZL     -> List( INST_VALID , READ_ENABLE   , READ_DISABLE    , FU_BR , EXE_LEZ  , WRITE_DISABLE  , WRA_X  , IMM_N  ),
      // BGEZL     -> List( INST_VALID , READ_ENABLE   , READ_DISABLE    , FU_BR , EXE_GEZ  , WRITE_DISABLE  , WRA_X  , IMM_N  ),
      // BGEZALL   -> List( INST_VALID , READ_ENABLE   , READ_DISABLE    , FU_BR , EXE_GEZAL, WRITE_ENABLE   , WRA_T3 , IMM_N  ),
      // BLTZL     -> List( INST_VALID , READ_ENABLE   , READ_DISABLE    , FU_BR , EXE_LTZ  , WRITE_DISABLE  , WRA_X  , IMM_N  ),
      // BLTZALL   -> List( INST_VALID , READ_ENABLE   , READ_DISABLE    , FU_BR , EXE_LTZAL, WRITE_ENABLE   , WRA_T3 , IMM_N  ),

      // // TLB
      TLBP  -> List(INST_VALID, READ_DISABLE, READ_DISABLE, FU_TLB, EXE_TLBP, WRITE_DISABLE, WRA_X, IMM_N),
      TLBR  -> List(INST_VALID, READ_DISABLE, READ_DISABLE, FU_TLB, EXE_TLBR, WRITE_DISABLE, WRA_X, IMM_N),
      TLBWI -> List(INST_VALID, READ_DISABLE, READ_DISABLE, FU_TLB, EXE_TLBWI, WRITE_DISABLE, WRA_X, IMM_N),
      TLBWR -> List(INST_VALID, READ_DISABLE, READ_DISABLE, FU_TLB, EXE_TLBWR, WRITE_DISABLE, WRA_X, IMM_N),

      // 例外指令
      SYSCALL -> List(INST_VALID, READ_DISABLE, READ_DISABLE, FU_EX, EXE_SYSCALL, WRITE_DISABLE, WRA_X, IMM_N),
      BREAK   -> List(INST_VALID, READ_DISABLE, READ_DISABLE, FU_EX, EXE_BREAK, WRITE_DISABLE, WRA_X, IMM_N),
      ERET    -> List(INST_VALID, READ_DISABLE, READ_DISABLE, FU_EX, EXE_ERET, WRITE_DISABLE, WRA_X, IMM_N),
      // WAIT      -> List( INST_VALID , READ_DISABLE    , READ_DISABLE    , FU_EX, EXC_WAIT, WRITE_DISABLE  , WRA_X  , IMM_N  ),

      // 访存指令
      LB  -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_MEM, EXE_LB, WRITE_ENABLE, WRA_T2, IMM_N),
      LBU -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_MEM, EXE_LBU, WRITE_ENABLE, WRA_T2, IMM_N),
      LH  -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_MEM, EXE_LH, WRITE_ENABLE, WRA_T2, IMM_N),
      LHU -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_MEM, EXE_LHU, WRITE_ENABLE, WRA_T2, IMM_N),
      LW  -> List(INST_VALID, READ_ENABLE, READ_DISABLE, FU_MEM, EXE_LW, WRITE_ENABLE, WRA_T2, IMM_N),
      SB  -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_MEM, EXE_SB, WRITE_DISABLE, WRA_X, IMM_N),
      SH  -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_MEM, EXE_SH, WRITE_DISABLE, WRA_X, IMM_N),
      SW  -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_MEM, EXE_SW, WRITE_DISABLE, WRA_X, IMM_N),
      LWL -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_MEM, EXE_LWL, WRITE_ENABLE, WRA_T2, IMM_N),
      LWR -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_MEM, EXE_LWR, WRITE_ENABLE, WRA_T2, IMM_N),
      SWL -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_MEM, EXE_SWL, WRITE_DISABLE, WRA_X, IMM_N),
      SWR -> List(INST_VALID, READ_ENABLE, READ_ENABLE, FU_MEM, EXE_SWR, WRITE_DISABLE, WRA_X, IMM_N),
      // LL        -> List( INST_VALID  , READ_ENABLE   , READ_DISABLE    , FU_MEM, EXE_LL  , WRITE_ENABLE   , WRA_T2 , IMM_N  ),
      // SC        -> List( INST_VALID  , READ_ENABLE   , READ_ENABLE     , FU_MEM, EXE_SC  , WRITE_DISABLE  , WRA_T2 , IMM_N  ),

      // SYNC      -> List( INST_VALID  , READ_DISABLE  , READ_ENABLE     , FU_NOP       , EXE_NOP , WRITE_DISABLE  , WRA_X  , IMM_N  ),
      // PREF      -> List( INST_VALID  , READ_DISABLE  , READ_DISABLE    , FU_NOP       , EXE_NOP , WRITE_ENABLE   , WRA_X  , IMM_N  ),
      // PREFX     -> List( INST_VALID  , READ_DISABLE  , READ_DISABLE    , FU_NOP       , EXE_NOP , WRITE_DISABLE  , WRA_X  , IMM_N  ),

      // // Cache
      // CACHE     -> List( INST_VALID , READ_ENABLE   , READ_DISABLE    , FU_MEM, EXE_CAC , WRITE_DISABLE  , WRA_X  , IMM_N  ),
    ),
  )
  val inst_valid :: reg1_ren :: reg2_ren :: fusel :: op :: reg_wen :: reg_waddr_type :: imm_type :: Nil =
    signals

  val rt    = inst(20, 16)
  val rd    = inst(15, 11)
  val sa    = inst(10, 6)
  val rs    = inst(25, 21)
  val imm16 = inst(15, 0)

  io.out.inst_valid := inst_valid
  io.out.reg1_ren   := reg1_ren
  io.out.reg2_ren   := reg2_ren
  io.out.fusel      := fusel
  io.out.op         := op
  io.out.reg_wen    := reg_wen
  io.out.reg_waddr := MuxLookup(
    reg_waddr_type,
    AREG_31, // 取"b11111", 即31号寄存器
    Seq(
      WRA_T1 -> rd, // 取inst(15,11)
      WRA_T2 -> rt, // 取inst(20,16)
    ),
  )
  io.out.imm32 := MuxLookup(
    imm_type,
    Util.zeroExtend(sa), // default IMM_SHT
    Seq(
      IMM_LSE -> Util.signedExtend(imm16),
      IMM_LZE -> Util.zeroExtend(imm16),
      IMM_HZE -> Cat(imm16, Fill(16, 0.U)),
    ),
  )

}
